{"version":3,"sources":["component/Header.js","component/Form.js","component/Canvas.js","component/MemeGenerator.js","component/Footer.js","App.js","serviceWorker.js","index.js","images/yaoming.png"],"names":["Header","react_default","a","createElement","src","yaoming","alt","Form","handleUpload","event","_this","refs","button","innerText","uploadInput","click","className","onSubmit","this","props","eventHandler","handleRandom","type","name","value","checked","modeSelector","onChange","handleChange","style","display","ref","accept","handleImage","onClick","React","Component","Canvas","handleDownload","altDownload","image","canvas","toDataURL","tempLink","document","download","href","body","appendChild","removeChild","handleGen","context","getContext","canvasImg","font","textAlign","strokeStyle","lineWidth","fillStyle","clearRect","width","height","drawImage","fillText","topText","toUpperCase","strokeText","bottomText","randomImg","uploadedImg","downloadBtn","onload","placeholder","marginTop","MemeGenerator","state","loading","allMemeImgs","_event$target","target","setState","Object","defineProperty","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","URL","createObjectURL","files","_this2","fetch","then","response","json","memes","data","component_Form","assign","component_Canvas","Footer","App","component_Header","component_MemeGenerator","component_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4570358c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport yaoming from \"../images/yaoming.png\"\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <img src={yaoming} alt=\"Yaoming\"/>\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nclass Form extends React.Component {\r\n    handleUpload = (event) => {\r\n        if(this.refs.button.innerText === \"Upload Image\") {\r\n            this.refs.uploadInput.click()\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <form className=\"meme-form\" onSubmit={this.props.eventHandler.handleRandom}>\r\n                <div className=\"upload-fields\">\r\n                    <label>\r\n                        <input \r\n                            type=\"radio\"\r\n                            name=\"modeSelector\"\r\n                            value=\"random\"\r\n                            checked={this.props.modeSelector === \"random\"}\r\n                            onChange={this.props.eventHandler.handleChange}\r\n                        />Random Image\r\n                    </label>\r\n                    <label>\r\n                        <input \r\n                            type=\"radio\"\r\n                            name=\"modeSelector\"\r\n                            value=\"user\"\r\n                            checked={this.props.modeSelector === \"user\"}\r\n                            onChange={this.props.eventHandler.handleChange}\r\n                        />Upload Image\r\n                    </label>\r\n                    <input\r\n                        style={{display:\"none\"}}\r\n                        ref=\"uploadInput\"\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={this.props.eventHandler.handleImage}\r\n                    />\r\n                    <button onClick={this.handleUpload} ref=\"button\" style={{display: !this.props.modeSelector && \"none\"}}>\r\n                        {this.props.modeSelector === \"random\" ? \"Random Image\" : \"Upload Image\"}\r\n                    </button>\r\n                </div>\r\n                <hr />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nclass Canvas extends React.Component {\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas\r\n        const context = canvas.getContext(\"2d\")\r\n        const image = this.refs.canvasImg\r\n        \r\n        image.onload = () => {\r\n            context.drawImage(image, 0, 0, canvas.width, canvas.height)\r\n        }\r\n    }\r\n\r\n    handleDownload = (event) => {\r\n        const altDownload = this.refs.altDownload\r\n        altDownload.style.display = \"block\"\r\n        \r\n        const canvas = this.refs.canvas\r\n        const image = canvas.toDataURL()\r\n\r\n        const tempLink = document.createElement(\"a\")\r\n        tempLink.download = \"Generated Meme.png\"\r\n        tempLink.href = image\r\n\r\n        document.body.appendChild(tempLink)\r\n        tempLink.click()\r\n        document.body.removeChild(tempLink)\r\n    }\r\n\r\n    handleGen = (event) => {\r\n        const canvas = this.refs.canvas\r\n        const context = canvas.getContext(\"2d\")\r\n        const image = this.refs.canvasImg\r\n\r\n        context.font = \"4em Anton\"\r\n        context.textAlign = \"center\"\r\n        context.strokeStyle = \"black\"\r\n        context.lineWidth = 2.5\r\n        context.fillStyle = \"white\"\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height)\r\n        context.drawImage(image, 0, 0, canvas.width, canvas.height)\r\n\r\n        context.fillText(this.props.topText.toUpperCase(), canvas.width / 2, 85)\r\n        context.strokeText(this.props.topText.toUpperCase(), canvas.width / 2, 85)\r\n\r\n        context.fillText(this.props.bottomText.toUpperCase(), canvas.width / 2, canvas.height - 35)\r\n        context.strokeText(this.props.bottomText.toUpperCase(), canvas.width / 2, canvas.height - 35)\r\n\r\n        if(this.props.randomImg || this.props.uploadedImg) {\r\n            const download = this.refs.downloadBtn\r\n            download.style.display = \"block\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div ref=\"generatedMeme\" className=\"meme\">\r\n                <div className=\"text-fields\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Enter Top Text\"\r\n                        value={this.props.topText}\r\n                        onChange={this.props.eventHandler.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Enter Bottom Text\"\r\n                        value={this.props.bottomText}\r\n                        onChange={this.props.eventHandler.handleChange}\r\n                    />\r\n                    <button onClick={this.handleGen}>Generate</button>\r\n                </div>\r\n                <canvas ref=\"canvas\" width={600} height={400}></canvas>\r\n                <img\r\n                    style={{display:\"block\"}}\r\n                    ref=\"canvasImg\"\r\n                    src={\r\n                        this.props.modeSelector === \"user\" ?\r\n                        this.props.uploadedImg :\r\n                        this.props.randomImg\r\n                    }\r\n                    alt=\"\"\r\n                />\r\n                <button\r\n                    style={{display:\"none\"}}\r\n                    className=\"download\"\r\n                    ref=\"downloadBtn\"\r\n                    onClick={this.handleDownload}\r\n                >Download</button>\r\n                <span style={{display:\"none\", marginTop:\"10px\"}} ref=\"altDownload\">\r\n                    Not downloading? Right click on the image and select <b>Save Image as...</b>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas","import React from \"react\"\r\nimport Form from \"./Form\"\r\nimport Canvas from \"./Canvas\"\r\n\r\nclass MemeGenerator extends React.Component {\r\n    state = {\r\n        loading: false,\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        allMemeImgs: [],\r\n        modeSelector: \"\",\r\n        randomImg: \"\",\r\n        uploadedImg: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({loading: true})\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({\r\n                    loading: false,\r\n                    allMemeImgs: memes\r\n                })\r\n            })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const {name, value, type, checked} = event.target\r\n        type === \"checkbox\" ?\r\n        this.setState({\r\n            [name]: checked\r\n        }) :\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleRandom = (event) => {\r\n        event.preventDefault()\r\n        \r\n        if(!this.props.loading) {\r\n            const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n            const randMemeImg = this.state.allMemeImgs[randNum].url\r\n            \r\n            this.setState({\r\n                randomImg: randMemeImg\r\n            })\r\n        }\r\n    }\r\n\r\n    handleImage = (event) => {\r\n        this.setState({ uploadedImg: URL.createObjectURL(event.target.files[0]) })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Form \r\n                    eventHandler = {this}\r\n                    {...this.state}\r\n                />\r\n                <Canvas\r\n                    eventHandler = {this}\r\n                    {...this.state}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\"\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer>\r\n            <hr />\r\n            <h4>Developed by <a href=\"https://twitter.com/kadirijhay\">@kadirijhay</a></h4>\r\n            <h4>Inspired by <a href=\"https://twitter.com/gdgogbomoso\">GDG Ogbomoso</a>'s #100DaysOfCode</h4>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from \"react\"\nimport Header from \"./component/Header\"\nimport MemeGenerator from \"./component/MemeGenerator\"\nimport Footer from \"./component/Footer\"\nimport \"./App.css\"\n\nfunction App() {\n    return(\n        <div>\n            <Header />\n            <MemeGenerator />\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();","module.exports = __webpack_public_path__ + \"static/media/yaoming.b3356bbe.png\";"],"sourceRoot":""}