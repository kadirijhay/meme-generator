{"version":3,"sources":["component/Header.js","component/MemeGenerator.js","App.js","serviceWorker.js","index.js","images/yaoming.png"],"names":["Header","react_default","a","createElement","src","yaoming","alt","MemeGenerator","state","loading","topText","bottomText","allMemeImgs","modeSelector","randomImg","uploadedImage","handleChange","event","_event$target","target","name","value","type","checked","_this","setState","Object","defineProperty","handleImage","URL","createObjectURL","files","handleSubmit","preventDefault","refs","button","innerText","uploadInput","click","randNum","Math","floor","random","length","randMemeImg","url","_this2","this","fetch","then","response","json","memes","data","canvas","context","getContext","image","canvasImg","onload","clearRect","width","height","drawImage","className","onSubmit","placeholder","onChange","style","display","ref","accept","React","Component","App","component_Header","component_MemeGenerator","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ebbd34ad.chunk.js","sourcesContent":["import React from \"react\"\r\nimport yaoming from \"../images/yaoming.png\"\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <img src={yaoming} alt=\"Yao Ming\" />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nclass MemeGenerator extends React.Component {\r\n    state = {\r\n        loading: false,\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        allMemeImgs: [],\r\n        modeSelector: \"\",\r\n        randomImg: \"\",\r\n        uploadedImage: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({\r\n                    loading: false,\r\n                    allMemeImgs: memes\r\n                })\r\n            })\r\n\r\n        const canvas = this.refs.canvas\r\n        const context = canvas.getContext(\"2d\")\r\n        const image = this.refs.canvasImg\r\n        \r\n        image.onload = () => {\r\n            context.clearRect(0, 0, canvas.width, canvas.height)\r\n            context.drawImage(image, 0, 0, canvas.width, canvas.height)\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const {name, value, type, checked} = event.target\r\n        type === \"checkbox\" ?\r\n        this.setState({\r\n            [name]: checked\r\n        }) :\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleImage = (event) => {\r\n        this.setState({ uploadedImage: URL.createObjectURL(event.target.files[0]) })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        if(this.refs.button.innerText === \"Upload Image\") {\r\n            this.refs.uploadInput.click()\r\n        }\r\n\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        \r\n        this.setState({\r\n            randomImg: randMemeImg\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Enter Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Enter Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <br />\r\n                    <label>\r\n                        <input \r\n                            type=\"radio\"\r\n                            name=\"modeSelector\"\r\n                            value=\"random\"\r\n                            checked={this.state.modeSelector === \"random\"}\r\n                            onChange={this.handleChange}\r\n                        /> Select Image at random\r\n                    </label>\r\n                    <label>\r\n                        <input \r\n                            type=\"radio\"\r\n                            name=\"modeSelector\"\r\n                            value=\"user\"\r\n                            checked={this.state.modeSelector === \"user\"}\r\n                            onChange={this.handleChange}\r\n                        /> Upload your Image\r\n                    </label>\r\n                    <input style={{display:\"none\"}} ref=\"uploadInput\" type=\"file\" accept=\"image/*\" onChange={this.handleImage}/>\r\n                    <button ref=\"button\" style={{display: !this.state.modeSelector && \"none\"}}>\r\n                        {this.state.modeSelector === \"random\" ? \"Generate\" : \"Upload Image\"}\r\n                    </button> \r\n                </form>\r\n\r\n                <div className=\"meme\">\r\n                    <h2 style={{display:\"none\"}} className=\"top\">{this.state.topText}</h2>\r\n                    <h2 style={{display:\"none\"}} className=\"bottom\">{this.state.bottomText}</h2>\r\n                    <canvas ref=\"canvas\" width={600} height={400}></canvas>\r\n                    <img\r\n                        style={{display:\"none\"}}\r\n                        ref=\"canvasImg\"\r\n                        src={\r\n                            this.state.modeSelector === \"user\" ? this.state.uploadedImage : this.state.randomImg\r\n                        }\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\"\nimport Header from \"./component/Header\"\nimport MemeGenerator from \"./component/MemeGenerator\"\nimport \"./App.css\"\n\nfunction App() {\n    return(\n        <div>\n            <Header />\n            <MemeGenerator />\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();","module.exports = __webpack_public_path__ + \"static/media/yaoming.b3356bbe.png\";"],"sourceRoot":""}